//------------------------------------------------------------------------
// @SMTG_SOURCE_COPYRIGHT_HEADER@
//------------------------------------------------------------------------

#include "@SMTG_PREFIX_FOR_FILENAMES@Processor.h"
#include "@SMTG_PREFIX_FOR_FILENAMES@Cids.h"

#include "base/source/fstreamer.h"
#include "pluginterfaces/vst/ivstparameterchanges.h"
#include "public.sdk/source/vst/vstaudioprocessoralgo.h"

using namespace Steinberg;
using namespace Vst;

namespace @SMTG_VENDOR_NAMESPACE@ {
//------------------------------------------------------------------------
// @SMTG_PLUGIN_CLASS_NAME@Processor
//------------------------------------------------------------------------
@SMTG_PLUGIN_CLASS_NAME@Processor::@SMTG_PLUGIN_CLASS_NAME@Processor () : mBypass(false), mGain(0.5)
{
	//--- set the wanted controller for our processor
	setControllerClass (k@SMTG_PLUGIN_CLASS_NAME@ControllerUID);
}

//------------------------------------------------------------------------
@SMTG_PLUGIN_CLASS_NAME@Processor::~@SMTG_PLUGIN_CLASS_NAME@Processor ()
{}

//------------------------------------------------------------------------
tresult PLUGIN_API @SMTG_PLUGIN_CLASS_NAME@Processor::initialize (FUnknown* context)
{
	// Here the Plug-in will be instantiated
	
	//---always initialize the parent-------
	tresult result = AudioEffect::initialize (context);
	// if everything Ok, continue
	if (result != kResultOk)
	{
		return result;
	}

	//--- create Audio IO ------
	@SMTG_EFFECT_AUDIO_BUSSES_CODE_SNIPPET@

	@SMTG_EFFECT_EVENT_BUSSES_CODE_SNIPPET@

	return kResultOk;
}

//------------------------------------------------------------------------
tresult PLUGIN_API @SMTG_PLUGIN_CLASS_NAME@Processor::terminate ()
{
	// Here the Plug-in will be de-instantiated, last possibility to remove some memory!
	
	//---do not forget to call parent ------
	return AudioEffect::terminate ();
}

//------------------------------------------------------------------------
tresult PLUGIN_API @SMTG_PLUGIN_CLASS_NAME@Processor::setActive (TBool state)
{
	//--- called when the Plug-in is enable/disable (On/Off) -----
	return AudioEffect::setActive (state);
}

//------------------------------------------------------------------------
tresult PLUGIN_API @SMTG_PLUGIN_CLASS_NAME@Processor::process (Vst::ProcessData& data)
{
	//--- First : Read inputs parameter changes-----------

	if (data.inputParameterChanges)
	{
		int32 numParamsChanged = data.inputParameterChanges->getParameterCount();
		for (int32 index = 0; index < numParamsChanged; index++)
		{
			if (IParamValueQueue* paramQueue = data.inputParameterChanges->getParameterData(index))
			{
				ParamValue value;
				int32 sampleOffset;
				int32 numPoints = paramQueue->getPointCount();
				switch (paramQueue->getParameterId())
				{
				case kCGainId:
					if (paramQueue->getPoint(numPoints - 1, sampleOffset, value) ==
						kResultTrue)
						mGain = value;
					break;
				case kBypassId:
					if (paramQueue->getPoint(numPoints - 1, sampleOffset, value) ==
						kResultTrue)
					{
						mBypass = (value > 0.5f);
					}
					break;
				}
			}
		}
	}
	
	//--- Here you have to implement your processing
	//fprintf(stderr, "Beginn process: data.inputParameterChanges ");


	//--- Here you have to implement your processing
	// Scheint wichtig zu sein, verstehe es aber nicht
	// Warum wird so ein mandatory check nicht schon vom SDK implementiert?
	if (data.numInputs == 0 || data.numOutputs == 0 || data.numSamples == 0)
	{
		// nothing to do
		return kResultOk;
	}

	auto inputs = data.inputs;

	if (processSetup.symbolicSampleSize == SymbolicSampleSizes::kSample64) {
		for (auto channelIndex = 0; channelIndex < inputs[0].numChannels; ++channelIndex)
		{
			auto inChannelBuffer = data.inputs[0].channelBuffers64[channelIndex];
			auto outChannelBuffer = data.outputs[0].channelBuffers64[channelIndex];

			for (auto sampleIndex = 0; sampleIndex < data.numSamples; ++sampleIndex)
			{
				if (mBypass = true) {
					outChannelBuffer[sampleIndex] = inChannelBuffer[sampleIndex];
				}
				outChannelBuffer[sampleIndex] = inChannelBuffer[sampleIndex] * mGain;
			}
		}
	}
	else {
		for (auto channelIndex = 0; channelIndex < inputs[0].numChannels; ++channelIndex)
		{
			auto inChannelBuffer = data.inputs[0].channelBuffers32[channelIndex];
			auto outChannelBuffer = data.outputs[0].channelBuffers32[channelIndex];

			for (auto sampleIndex = 0; sampleIndex < data.numSamples; ++sampleIndex)
			{
				if (mBypass = true) {
					outChannelBuffer[sampleIndex] = inChannelBuffer[sampleIndex];	
				}
				outChannelBuffer[sampleIndex] = inChannelBuffer[sampleIndex] * mGain;
			}
		}
	}

	return kResultOk;
}

//------------------------------------------------------------------------
tresult PLUGIN_API @SMTG_PLUGIN_CLASS_NAME@Processor::setupProcessing (Vst::ProcessSetup& newSetup)
{
	//--- called before any processing ----
	return AudioEffect::setupProcessing (newSetup);
}

//------------------------------------------------------------------------
tresult PLUGIN_API @SMTG_PLUGIN_CLASS_NAME@Processor::canProcessSampleSize (int32 symbolicSampleSize)
{
	// by default kSample32 is supported
	if (symbolicSampleSize == Vst::kSample32)
		return kResultTrue;

	// disable the following comment if your processing support kSample64
	/* if (symbolicSampleSize == Vst::kSample64)
		return kResultTrue; */

	return kResultFalse;
}

//------------------------------------------------------------------------
tresult PLUGIN_API @SMTG_PLUGIN_CLASS_NAME@Processor::setState (IBStream* state)
{
	// called when we load a preset, the model has to be reloaded
	IBStreamer streamer (state, kLittleEndian);
	
	return kResultOk;
}

//------------------------------------------------------------------------
tresult PLUGIN_API @SMTG_PLUGIN_CLASS_NAME@Processor::getState (IBStream* state)
{
	// here we need to save the model
	IBStreamer streamer (state, kLittleEndian);

	return kResultOk;
}

//------------------------------------------------------------------------
tresult PLUGIN_API @SMTG_PLUGIN_CLASS_NAME@Processor::setBusArrangements(SpeakerArrangement* inputs, int32 numIns,
	SpeakerArrangement* outputs, int32 numOuts)
{
	if (numIns == 1 && numOuts == 1)
	{
		// the host wants Mono => Mono (or 1 channel -> 1 channel)
		if (SpeakerArr::getChannelCount(inputs[0]) == 1 &&
			SpeakerArr::getChannelCount(outputs[0]) == 1)
		{
			auto* bus = FCast<AudioBus>(audioInputs.at(0));
			if (bus)
			{
				// check if we are Mono => Mono, if not we need to recreate the busses
				if (bus->getArrangement() != inputs[0])
				{
					bus->setArrangement(inputs[0]);
					bus->setName(STR16("Mono In"));
					if (auto* busOut = FCast<AudioBus>(audioOutputs.at(0)))
					{
						busOut->setArrangement(outputs[0]);
						busOut->setName(STR16("Mono Out"));
					}
				}
				return kResultOk;
			}
		}
		// the host wants something else than Mono => Mono, in this case we are always Stereo =>
		// Stereo
		else
		{
			auto* bus = FCast<AudioBus>(audioInputs.at(0));
			if (bus)
			{
				tresult result = kResultFalse;

				// the host wants 2->2 (could be LsRs -> LsRs)
				if (SpeakerArr::getChannelCount(inputs[0]) == 2 &&
					SpeakerArr::getChannelCount(outputs[0]) == 2)
				{
					bus->setArrangement(inputs[0]);
					bus->setName(STR16("Stereo In"));
					if (auto* busOut = FCast<AudioBus>(audioOutputs.at(0)))
					{
						busOut->setArrangement(outputs[0]);
						busOut->setName(STR16("Stereo Out"));
					}
					result = kResultTrue;
				}
				// the host want something different than 1->1 or 2->2 : in this case we want stereo
				else if (bus->getArrangement() != SpeakerArr::kStereo)
				{
					bus->setArrangement(SpeakerArr::kStereo);
					bus->setName(STR16("Stereo In"));
					if (auto* busOut = FCast<AudioBus>(audioOutputs.at(0)))
					{
						busOut->setArrangement(SpeakerArr::kStereo);
						busOut->setName(STR16("Stereo Out"));
					}

					result = kResultFalse;
				}

				return result;
			}
		}
	}
	return kResultFalse;
}
} // namespace @SMTG_VENDOR_NAMESPACE@

