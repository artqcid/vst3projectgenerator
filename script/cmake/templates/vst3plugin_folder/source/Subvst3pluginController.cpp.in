//------------------------------------------------------------------------
// @SMTG_SOURCE_COPYRIGHT_HEADER@
//------------------------------------------------------------------------

#include "Sub@SMTG_PLUGIN_CLASS_NAME@Controller.h"
#include "@SMTG_PLUGIN_CLASS_NAME@Cids.h"
#include "public.sdk/source/vst/utility/stringconvert.h"
#include <iostream>
#include <string>
#include <sstream>


using namespace VSTGUI;
using namespace Steinberg;
using namespace @SMTG_VENDOR_NAMESPACE@;

//------------------------------------------------------------------------
// Sub@SMTG_PLUGIN_CLASS_NAME@Controller Implementation
//------------------------------------------------------------------------

//------------------------------------------------------------------------
Sub@SMTG_PLUGIN_CLASS_NAME@Controller::~Sub@SMTG_PLUGIN_CLASS_NAME@Controller()
{
	/** TODO: Just an example with an Gain Parameter
	if (cGain) {
		cGain->unregisterControlListener(this);
		cGain->forget();
	    cGain = nullptr;

	}
	lGainValue = nullptr;
	**/
}

//------------------------------------------------------------------------
void PLUGIN_API Sub@SMTG_PLUGIN_CLASS_NAME@Controller::update (FUnknown* changedUnknown, int32 /*message*/)
{

}

//------------------------------------------------------------------------
VSTGUI::CView* Sub@SMTG_PLUGIN_CLASS_NAME@Controller::verifyView (VSTGUI::CView* view,
                                                 const VSTGUI::UIAttributes& attributes,
                                                 const VSTGUI::IUIDescription* description)
{
	/** TODO: EXAMPLE with an Gain Parameter
	if (auto control = dynamic_cast<CKnob*>(view); control && control->getTag() == kCGainId)
	{
		cGain = control;
		cGain->registerControlListener(this);
		cGain->remember();
		cGain->setValue(0.5);
		cGain->setDirty();
		//now we set also the parameter value from the Knob control value

	}
	**/

	/** TODO: EXAMPLE with an CTextLabel 
	if (auto control = dynamic_cast<CTextLabel*>(view); control && control->getTag() == kLGainValueId)
	{
		lGainValue = control;
		lGainValue->setValueToStringFunction(normalizedValueToZeroToHundredString);
		
		//lGainValue->setPrecision(1);
		//lGainValue->setText(std::to_string(cGain->getValue() * 100).c_str());

		lGainValue->setValue(cGain->getValue());
		lGainValue->valueChanged();
		lGainValue->setDirty();
	}
	**/
	
	// Always return to base class because we dont wont loose the parameter Binding
	return controller->verifyView(view, attributes, description);
}

//------------------------------------------------------------------------
void Sub@SMTG_PLUGIN_CLASS_NAME@Controller::valueChanged (VSTGUI::CControl* pControl)
{
	// Always return to base class because we dont wont loose the parameter Binding
	if (!pControl)
		return controller->valueChanged(pControl);

	/** TODO: EXAMPLE with an CTextLabel 
	//Check GainKnob Change and set it Parameter and to GainLabel
	if (pControl->getTag() == kCGainId) 
	{

		lGainValue->setText(std::to_string(cGain->getValue()*100).c_str());
		lGainValue->setValue(cGain->getValue());
		lGainValue->valueChanged();
		lGainValue->setDirty();

		// Always return to base class because we dont wont loose the parameter Binding
		return controller->valueChanged(pControl);
	}
	**/

}

//------------------------------------------------------------------------
void Sub@SMTG_PLUGIN_CLASS_NAME@Controller::controlBeginEdit (VSTGUI::CControl* pControl)
{
	// Always return to base class because we dont wont loose the parameter Binding
	if (!pControl)
		return controller->controlBeginEdit(pControl);
}

//------------------------------------------------------------------------
void Sub@SMTG_PLUGIN_CLASS_NAME@Controller::controlEndEdit (VSTGUI::CControl* pControl)
{
	// Always return to base class because we dont wont loose the parameter Binding
	if (!pControl)
		return controller->controlEndEdit(pControl);
}

//------------------------------------------------------------------------
// TODO: EXAMPLE This Method takes a normalized float Value and convert it to a String
// This Method takes a normalized float Value and convert it to a String
// because we dont want a 0.0 - 1.0 representation we multiply with 100
// (From 0.4678904 we got to 46.78904)
// and round the value to int because we dont need the decimal after multiply
// (From 46.78904 to 47)
// This Method can be used to set it to the CTextLabel->setValueToStringFunction(function name)
bool Sub@SMTG_PLUGIN_CLASS_NAME@Controller::normalizedValueToZeroToHundredString(float value, char utf8String[256], CParamDisplay*)
{
	auto floatValue = value*100;
	int intValueRounded = (int)std::floor(floatValue);
	std::stringstream str;
	str << intValueRounded;
	std::strcpy(utf8String, str.str().data());
	return true;
}