//------------------------------------------------------------------------
// @SMTG_SOURCE_COPYRIGHT_HEADER@
//------------------------------------------------------------------------

#include "@SMTG_PREFIX_FOR_FILENAMES@BusArrangementHandler.h"

using namespace Steinberg;
using namespace Vst;

namespace @SMTG_VENDOR_NAMESPACE@ {
//------------------------------------------------------------------------
// @SMTG_PLUGIN_CLASS_NAME@Processor
//------------------------------------------------------------------------

@SMTG_PLUGIN_CLASS_NAME@BusArrangementHandler::@SMTG_PLUGIN_CLASS_NAME@BusArrangementHandler()
{

}

@SMTG_PLUGIN_CLASS_NAME@BusArrangementHandler::~@SMTG_PLUGIN_CLASS_NAME@BusArrangementHandler()
{

}

//------------------------------------------------------------------------
tresult @SMTG_PLUGIN_CLASS_NAME@BusArrangementHandler::createBusArrangements(SpeakerArrangement* inputs, int32 numIns,
	SpeakerArrangement* outputs, int32 numOuts,BusList audioInputs, BusList audioOutputs)
{
	if (numIns == 1 && numOuts == 1)
	{
		// the host wants Mono => Mono (or 1 channel -> 1 channel)
		if (SpeakerArr::getChannelCount(inputs[0]) == 1 &&
			SpeakerArr::getChannelCount(outputs[0]) == 1)
		{
			auto* bus = FCast<AudioBus>(audioInputs.at(0));
			if (bus)
			{
				// check if we are Mono => Mono, if not we need to recreate the busses
				if (bus->getArrangement() != inputs[0])
				{
					bus->setArrangement(inputs[0]);
					bus->setName(STR16("Mono In"));
					if (auto* busOut = FCast<AudioBus>(audioOutputs.at(0)))
					{
						busOut->setArrangement(outputs[0]);
						busOut->setName(STR16("Mono Out"));
					}
				}
				return kResultOk;
			}
		}
		// the host wants something else than Mono => Mono, in this case we are always Stereo =>
		// Stereo
		else
		{
			auto* bus = FCast<AudioBus>(audioInputs.at(0));
			if (bus)
			{
				tresult result = kResultFalse;

				// the host wants 2->2 (could be LsRs -> LsRs)
				if (SpeakerArr::getChannelCount(inputs[0]) == 2 &&
					SpeakerArr::getChannelCount(outputs[0]) == 2)
				{
					bus->setArrangement(inputs[0]);
					bus->setName(STR16("Stereo In"));
					if (auto* busOut = FCast<AudioBus>(audioOutputs.at(0)))
					{
						busOut->setArrangement(outputs[0]);
						busOut->setName(STR16("Stereo Out"));
					}
					result = kResultTrue;
				}
				// the host want something different than 1->1 or 2->2 : in this case we want stereo
				else if (bus->getArrangement() != SpeakerArr::kStereo)
				{
					bus->setArrangement(SpeakerArr::kStereo);
					bus->setName(STR16("Stereo In"));
					if (auto* busOut = FCast<AudioBus>(audioOutputs.at(0)))
					{
						busOut->setArrangement(SpeakerArr::kStereo);
						busOut->setName(STR16("Stereo Out"));
					}

					result = kResultFalse;
				}

				return result;
			}
		}
	}
	return kResultFalse;
}





//------------------------------------------------------------------------
} // namespace @SMTG_VENDOR_NAMESPACE@

